type Singer @model @auth(rules: [{allow: public}]) @key(name: "byPartySession", fields: ["partysessionID"]) {
  id: ID!
  name: String!
  partysessionID: ID!
  votes: Int!
  hearts: Int!
  expirationTimestamp: AWSTimestamp! @ttl
}

enum SessionState {
  CREATING
  INPROGRESS
  ENDED
}

type PartySession @model @key(fields: ["city", "sessionStartTime"], name: "cityByStartTime", queryField: "partySessionCityByStartTime") @auth(rules: [{allow: public}]) {
  id: ID!
  city: String!
  sessionStartTime: String!
  sessionState: SessionState!
  genreCode: String,
  expirationTimestamp: AWSTimestamp! @ttl
  singers: [Singer] @connection(keyName: "byPartySession", fields: ["id"])
}

type Subscription {
  onCreateSingerByPartySessionId(partysessionID: String!): Singer
    @aws_subscribe(mutations: ["createSinger"])
  onUpdateSingerById(id: String!): Singer
    @aws_subscribe(mutations: ["updateSinger"])
}
